
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorials/ch1_fundamentals/ch1_7_3d_visualization.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorials_ch1_fundamentals_ch1_7_3d_visualization.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorials_ch1_fundamentals_ch1_7_3d_visualization.py:


1.7: 3-D Visualization
======================

.. GENERATED FROM PYTHON SOURCE LINES 8-9

Importing GemPy

.. GENERATED FROM PYTHON SOURCE LINES 9-16

.. code-block:: Python

    import gempy as gp
    import gempy_viewer as gpv
    from gempy import generate_example_model
    from gempy.core.data.enumerators import ExampleModel

    # sphinx_gallery_thumbnail_number = -1








.. GENERATED FROM PYTHON SOURCE LINES 17-20

Loading an example geomodel
~~~~~~~~~~~~~~~~~~~~~~~~~~~


.. GENERATED FROM PYTHON SOURCE LINES 22-28

.. code-block:: Python



    geo_model = generate_example_model(ExampleModel.GRABEN)

    gp.compute_model(geo_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Surface points hash:  8c72af50fc56389b620c6458a6af23915b121b5e655b3ce179a790636dc529a5
    Orientations hash:  87cf30b08b5be03b38c5e6d288fa7bb8855263704efb62c7c3cd77673eaae96d
    Setting Backend To: AvailableBackends.numpy
    Chunking done: 19 chunks
    Chunking done: 36 chunks
    Chunking done: 34 chunks
    Setting Backend To: AvailableBackends.numpy
    Chunking done: 19 chunks
    Chunking done: 36 chunks
    Chunking done: 34 chunks


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <b>Solutions:</b> 6 Octree Levels, 8 DualContouringMeshes
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 29-32

Basic plotting API
------------------


.. GENERATED FROM PYTHON SOURCE LINES 35-38

Data plot
~~~~~~~~~


.. GENERATED FROM PYTHON SOURCE LINES 40-48

.. code-block:: Python

    gpv.plot_3d(
        model=geo_model,
        show_surfaces=False,
        show_data=True,
        show_lith=False,
        image=False
    )




.. image-sg:: /tutorials/ch1_fundamentals/images/sphx_glr_ch1_7_3d_visualization_001.png
   :alt: ch1 7 3d visualization
   :srcset: /tutorials/ch1_fundamentals/images/sphx_glr_ch1_7_3d_visualization_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <gempy_viewer.modules.plot_3d.vista.GemPyToVista object at 0x7fc8ec5c0f40>



.. GENERATED FROM PYTHON SOURCE LINES 49-52

Geomodel plot
~~~~~~~~~~~~~


.. GENERATED FROM PYTHON SOURCE LINES 54-56

.. code-block:: Python

    gpv.plot_3d(geo_model, image=False)




.. image-sg:: /tutorials/ch1_fundamentals/images/sphx_glr_ch1_7_3d_visualization_002.png
   :alt: ch1 7 3d visualization
   :srcset: /tutorials/ch1_fundamentals/images/sphx_glr_ch1_7_3d_visualization_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <gempy_viewer.modules.plot_3d.vista.GemPyToVista object at 0x7fc8ed2e5d20>



.. GENERATED FROM PYTHON SOURCE LINES 57-65

LiquidEarth Integration
~~~~~~~~~~~~~~~~~~~~~~~
Beyond the classical plotting capabilities introduced in GemPy v3, users can now also upload models to LiquidEarth. 
`LiquidEarth <https://www.terranigma-solutions.com/liquidearth>`_ is a collaborative platform designed for 3D visualization,
developed by many of the main `gempy` maintainers,  with a strong focus on collaboration and sharing. 
This makes it an excellent tool for sharing your models with others and viewing them across different platforms.
To upload a model to LiquidEarth, you must have an account and a user token. Once your model is uploaded, 
you can easily share the link with anyone.

.. GENERATED FROM PYTHON SOURCE LINES 67-77

.. code-block:: Python

    link = gpv.plot_to_liquid_earth(
        geo_model=geo_model,
        space_name="[PUBLIC] GemPy Tutorial 1.7: 3-D Visualization",
        file_name="gempy_model",
        user_token=None,  # If None, it will try to grab it from the environment
        grab_link=True,
    )

    print(f"Generated Link: {link}")



.. rst-class:: sphx-glr-script-out

.. code-block:: pytb

    Traceback (most recent call last):
      File "/Users/flow/git/gempy/examples/tutorials/ch1_fundamentals/ch1_7_3d_visualization.py", line 67, in <module>
        link = gpv.plot_to_liquid_earth(
      File "/Users/flow/opt/anaconda3/envs/gempy3_pre/lib/python3.10/site-packages/gempy_viewer/API/_plot_LiquidEarth.py", line 19, in plot_to_liquid_earth
        raise ValueError("No user token provided and no token found in the environment")
    ValueError: No user token provided and no token found in the environment




.. GENERATED FROM PYTHON SOURCE LINES 78-79

Now we can use `this link <https://liquidearth.app.link/gempy-promo>`_ to visualize the model in Liquid Earth.

.. GENERATED FROM PYTHON SOURCE LINES 81-82

.. image:: /_static/gp_model_in_le.png


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (3 minutes 49.146 seconds)


.. _sphx_glr_download_tutorials_ch1_fundamentals_ch1_7_3d_visualization.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: ch1_7_3d_visualization.ipynb <ch1_7_3d_visualization.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: ch1_7_3d_visualization.py <ch1_7_3d_visualization.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: ch1_7_3d_visualization.zip <ch1_7_3d_visualization.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
